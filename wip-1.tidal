
--  Introducción a tidalcycles
--  Traducción de taller impartido por
--  Lucy Cheesman, Richard Eason, Alex McLean inspirado en trabajo de
--  Alexandra Cardenas
-- CC BY-SA 4.0 - https://creativecommons.org/licenses/by-sa/4.0/

-- * Sonar con tidal
-- Evalúa la siguiente linea
d1 $ sound "arpy"

-- * Para detener el sonido lo reemplazamos por un silencio

d1 silence

-- * Elije un sonido diferente del mismo conjunto, con ':'

d1 $ sound "arpy:1"
-- * Explora más sonidos:

-- flick sid can metal future gabba sn mouth co gretsch mt arp h cp cr
-- newnotes bass hc tabla bass0 hh bass1 bass2 oc bass3 ho odx
-- diphone2 house off ht tink perc bd industrial pluck trump
-- printshort jazz voodoo birds3 procshort blip drum jvbass psr wobble
-- drumtraks koy rave bottle kurt latibro rm sax lighter lt arpy feel
-- less stab ul

-- * ¿De dónde provienen estos sonidos? ¿Cómo agrego más?

-- En los menús de SuperCollider (no atom):
-- Archivo> Abrir directorio de soporte al usuario> quarks descargados> Dirt-Samples

-- * Hacer una secuencia

d1 $ sound "bd hh sn hh"

-- * Agrega un silencio / descanso en una secuencia con '~'

d1 $ sound "bd ~ sn:3 bd sn:5 ~ bd:2 sn:2"

-- * Cuanto más larga es la secuencia, más rápido se ejecuta

d1 $ sound "bd bd hh bd sn bd hh bd"

-- * Juega más de una secuencia a la vez con d1 ... d9

d2 $ sound "sn [sn:2 sn] bd sn"

-- * Cambia los ciclos globales por segundo (equivalente a BPM)

cps 0.6

-- * Pausar todo (recuerda poner números negativos entre paréntesis)

cps (-1)

-- * Comenzar de nuevo

cps 0.6

-- * Hush hace que todo se silencie

hush

-- * Efectos

-- ** vowel

d1 $ sound "drum drum drum drum" # vowel "a o"

-- La 'estructura' viene de la izquierda - intenta intercambiar los parámetros

d1 $ vowel "a o ~ i" # sound "drum"

-- ** gain

d1 $ sound "bd hh sn:1 hh sn:1 hh" # gain "1 0.7 0.5"

-- 'sine' es un patrón continuo que sigue una curva sinusoidal de 0 a 1 y viceversa

d1 $ sound "bd*32" # gain sine

-- ** 'speed' sube
-- la velocidad de reproducción, p. ej. 2 = una octava arriba
d1 $ speed "1 2 4" # sound "jungbass:6"

-- up - semitonos, p. ej. 12 = una octava arriba
d1 $ up "0 ~ 12 24" # sound "jungbass:6"

d1 $ sound "numbers:1 numbers:2 numbers:3 numbers:4"

-- Usaremos este para explicar el paneo

d1 $ sound "numbers:1 numbers:2 numbers:3 numbers:4" # speed "1 1.5 2 0.5"

-- ** pan - 0 = izquierda, 0.5 = en medio, 1 = derecha
d1 $ sound "numbers:1 numbers:2 numbers:3 numbers:4" # pan "0 0.5 1"

-- We can use * to repeat a step, e.g. this plays 16 kick drums per cycle,
-- panned from left to right following a sine curve, pitched right up:

-- Podemos usar * para repetir un paso, p. ej. esto toca 16 kick drums por ciclo,
-- Panorámica de izquierda a derecha siguiendo una curva sinusoidal, inclinada hacia arriba:

d1 $ sound "drum*16" # pan sine # speed "4"

-- ** shape - - distorsión (cuidado - también hace que el sonido sea mucho más fuerte)

d1 $ sound "kurt:4 kurt:4" # shape "0 0.78" # gain "0.7"

d1 silence


-- * Efectos

-- http://tidalcycles.org/docs/reference/audio_effects

-- delay / delaytime / delayfeedback
-- cutoff / resonance
-- room / size

-- * Subsecuencias

-- -- Introduce una subsecuencia en un ciclo con corchetes:


d1 $ sound "bd [bd cp] bd bd"

-- Esto puede hacer que las marcas de tiempo sean flexibles:

d1 $ sound "[bd bd sn:5] [bd sn:3]"

-- Puedes poner subsecuencias dentro de subsecuencias:

d1 $ sound "[[bd bd] bd sn:5] [bd sn:3]"

-- Continuamos con eso..
d1 $ sound "[[bd [bd bd bd bd]] bd sn:5] [bd sn:3]"


-- * Secuencias polimétricas / polirrítmicas
--Reproduce dos subsecuencias a la vez separándolas con una coma:

d1 $ sound "[voodoo voodoo:3, arpy arpy:4 arpy:2]"

-- compara como [,] y {,} funcionan:

d1 $ sound "[voodoo voodoo:3, arpy arpy:4 arpy:2]"

d1 $ sound "{voodoo voodoo:3, arpy arpy:4 arpy:2}"

d1 $ sound "[drum bd hh bd, can can:2 can:3 can:4 can:2]"

d1 $ sound "{drum bd hh bd, can can:2 can:3 can:4 can:2}"

d1 $ sound "[bd sn, can:2 can:3 can:1, arpy arpy:1 arpy:2 arpy:3 arpy:5]"

d1 $ sound "{bd sn, can:2 can:3 can:1, arpy arpy:1 arpy:2 arpy:3 arpy:5}"

-- * Qué es un patrón?

-- Pensemos en diferentes tipos de patrones y cómo Tidal puede
-- representarlos

-- ** Ciclo / repetitivo

d1 $ n "0 1 2 3" # sound "arpy"

d1 $ n (run 4) # sound "arpy"

-- ** simétrico

-- Compara lo siguiente:

d1 $ slow 2 $ n "0 1 2 3 3 2 1 0" # sound "arpy"

d1 $ palindrome $ n (run 4) # sound "arpy"

-- ** auto semejanza

d1 $ slow 4 $ n "[0 1 2 3] [0 1 2 3]*2 [0 1 2 3]*4 [0 1 2 3]*8" # sound "arpy"

d1 $ slowspread (density) [1,2,4,8] $ n "0 1 2 3" # sound "arpy"

-- ** interferencia


-- Hay muchas formas de hacer que los patrones interfieran entre sí, p. Ej.
-- polirritmos:

d1 $ sound "{arpy arpy:2 arpy:4, arpy:5 arpy:0}"

-- Un cannon
d1 $ jux rev $ weave 16 (n (run 8) # sound "arpy")
  [vowel "a e i",
   vowel "e i*2 o u",
   speed "1 1.5 ~ 1",
   speed "2 1 0.5"
  ]

-- Transformando secuencias

-- slow

d1 $ sound "arpy arpy:1 arpy:2 arpy:3"

d1 $ slow 2 $ sound "arpy arpy:1 arpy:2 arpy:3"

-- density
d1 $ density 2 $ sound "arpy arpy:1 arpy:2 arpy:3"

-- density 2 es la misma que slow 0.5 ..
d1 $ slow 0.5 $ sound "arpy arpy:1 arpy:2 arpy:3"
d1 silence

-- Revertir

d1 $ rev $ sound "arpy arpy:1 arpy:2 arpy:3"

-- iterar

d1 $ iter 4 $ sound "arpy arpy:1 arpy:2 arpy:3"

-- every
-- cada cuarto ciclo, haz el doble de densidad:

d1 $ every 4 (density 2) $ sound "arpy arpy:1 arpy:2 arpy:3"

-- Más de una transformación es posible
d1 $ jux (rev . (slow 1.5)) $ sound "arpy arpy:1 arpy:2 arpy:3"

d1 silence

Para más ejemplos revisen:
  http://twitter.com/tidalbot/
